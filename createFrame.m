function [rg,debug_info] = createFrame( ...
        mu, ...
        NGridSize, ...
        kssb, ...
        Nstart, ...
        NCRB_SSB,...
        NCellId, ...
        block_pattern, ...
        case_letter, ...
        carrier, ...
        MIB, ...
        shared_spectrum)
    arguments
        mu (1,1) {mustBeInteger,mustBeInRange(mu,0,6)}
        NGridSize (1,1) {mustBeInteger}
        kssb (1,1) {mustBeInteger}
        Nstart (1,1) {mustBeInteger}
        NCRB_SSB (1,1) {mustBeInteger}
        NCellId (1,1) {mustBeInteger,mustBeInRange(NCellId,0,1007)}
        block_pattern {mustBeMember(block_pattern,[0,1])}
        case_letter (1,1) {mustBeTextScalar}
        carrier (1,1)
        MIB struct {mustBeCorrectMIB(MIB)}
        shared_spectrum logical=0
    end
    
    pss=genPss(mod(NCellId,3));
    sss=genSss(NCellId);
    dmrs=zeros(8,144);
    for i=0:7
        dmrs(i+1,:)=genPbchDmRs(NCellId,i);
    end
    rm=ResourceMapper(NGridSize,nrCom.Nsymb_slot*nrCom.Nslot_frame(mu));
    
    [blocks,Lbarmax]=nrCom.blocksByCase(case_letter,carrier,shared_spectrum);
    debug_info.Lbarmax=Lbarmax;
    debug_info.blocks=blocks;
    index=1;
    for half_frame=0:1
        for i=0:Lbarmax-1
            if (block_pattern(i+1))
                payload=genPayload( ...
                    Lbarmax, ...
                    i, ...
                    kssb, ...
                    0, ...
                    MIB.SFN, ...
                    half_frame, ...
                    MIB.subCarrierSpacingCommon,...
                    MIB.dmrsTypeAPosition,...
                    MIB.pdcch_ConfigSIB1,...
                    MIB.cellBarred, ...
                    MIB.intraFreqReselection, 0);
                pbch=genPbch(payload,NCellId,Lbarmax,i);
                debug_info.pbch{1,index}=pbch;index=index+1;
                pbch=qpskModulate(pbch);
                rm.mapBlock( ...
                    pss,sss, ...
                    pbch,dmrs(mod(i,8)+1,:),...
                    NCellId,...
                    (-12*Nstart+kssb+floor(NCRB_SSB*12/2^mu)),...
                    blocks(i+1)...
                    );
            end
        end
    end
    rg=rm.resource_grid;

end

function mustBeCorrectMIB(MIB)
    mustBeNonempty(MIB.SFN);
    mustBeNumeric(MIB.SFN);
    mustBeInteger(MIB.SFN);
    mustBeNonnegative(MIB.SFN);
    mustBeNonempty(MIB.subCarrierSpacingCommon);
    mustBeNonempty(MIB.dmrsTypeAPosition);
    mustBeNonempty(MIB.pdcch_ConfigSIB1);
    mustBeNonempty(MIB.cellBarred);
    mustBeNonempty(MIB.intraFreqReselection);
end